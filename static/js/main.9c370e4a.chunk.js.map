{"version":3,"sources":["component/Card.js","App.js","reportWebVitals.js","index.js"],"names":["Card","useState","city","setCity","country","setCountry","search","setSearch","useEffect","fetchapi","a","url","fetch","response","json","jsonresponse","console","log","main","sys","className","style","width","margin","height","type","placeholder","onChange","event","target","value","temp","temp_min","temp_max","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAEe,SAASA,IACtB,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,mBAAS,MAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,mBAAS,UAArC,mBAAOK,EAAP,KAAeC,EAAf,KAgBA,OAbOC,qBAAU,WACf,IAAMC,EAAQ,uCAAG,gCAAAC,EAAA,6DACTC,EADS,4DACkDL,EADlD,iEAEQM,MAAMD,GAFd,cAETE,EAFS,gBAGYA,EAASC,OAHrB,OAGTC,EAHS,OAIfC,QAAQC,IAAIF,GACZZ,EAAQY,EAAaG,MACrBb,EAAWU,EAAaI,KANT,4CAAH,qDASdV,MACC,CAACH,IAGF,sBAAKc,UAAU,iBAAf,UACE,oBAAIA,UAAU,cAAd,gCACA,qBACEA,UAAU,mCACVC,MAAO,CACLC,MAAO,QACPC,OAAQ,OACRC,OAAQ,QALZ,SAQE,sBAAKJ,UAAU,yBAAf,UACE,oBAAIA,UAAU,mBAAd,mCACA,uBACEK,KAAK,SACLC,YAAc,kBACdC,SAAU,SAACC,GACTrB,EAAUqB,EAAMC,OAAOC,UAIzB5B,GAASE,EAGT,sBAAKgB,UAAU,YAAf,UACE,sBAAKA,UAAU,OAAf,UACE,oBAAIA,UAAU,aACd,mBAAGA,UAAU,uBAFf,IAEyC,uCAAQd,EAAR,cAAoBF,EAAQA,QAA5B,UAGzC,oBAAIgB,UAAU,OAAd,SAAsBlB,EAAK6B,OAE3B,oBAAIX,UAAU,uBAAd,yCAA+DlB,EAAK8B,YACpE,oBAAIZ,UAAU,uBAAd,yCAA+DlB,EAAK+B,eAXtE,sDChCGC,MANf,WACE,OACI,cAAClC,EAAD,KCKSmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9c370e4a.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nexport default function Card() {\r\n  const [city, setCity] = useState(null);\r\n  const [country, setCountry] = useState(\"In\")\r\n  const [search, setSearch] = useState(\"Mumbai\");\r\n  \r\n\r\n  https: useEffect(() => {\r\n    const fetchapi = async () => {\r\n      const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&units=metric&APPID=b9ea336c62e3b1dd17f52c2c57b12f62`;\r\n      const response = await fetch(url);\r\n      const jsonresponse = await response.json();\r\n      console.log(jsonresponse);\r\n      setCity(jsonresponse.main);\r\n      setCountry(jsonresponse.sys)\r\n    };\r\n\r\n    fetchapi();\r\n  }, [search]);\r\n\r\n  return (\r\n    <div className=\"container my-3\" >\r\n      <h1 className=\"text-center\">Weather-Forecaster</h1>\r\n      <div\r\n        className=\"card text-white bg-primary mb-3 \"\r\n        style={{\r\n          width: \"18rem\",\r\n          margin: \"auto\",\r\n          height: \"50vh\",\r\n        }}\r\n      >\r\n        <div className=\"card-body  text-center\">\r\n          <h5 className=\"card-title my-3 \">Enter City Name Below</h5>\r\n          <input\r\n            type=\"search\" \r\n            placeholder = \"Search Location\"\r\n            onChange={(event) => {\r\n              setSearch(event.target.value);\r\n            }}\r\n          />\r\n\r\n          {!city || !country ? (\r\n            <p>No Data Found</p>\r\n          ) : (\r\n            <div className=\"container\">\r\n              <div className=\"info\">\r\n                <h2 className=\"location\"></h2>\r\n                <i className=\"fas fa-street-view\"></i> <h3>{`${search} , ${country.country} `}</h3>\r\n              </div>\r\n\r\n              <h2 className=\"temp\">{city.temp}</h2>\r\n             \r\n              <h6 className=\"min_temp_discription\">{`minimum temperature : ${city.temp_min}`}</h6>\r\n              <h6 className=\"max_temp_discription\">{`maximum temperature : ${city.temp_max}`}</h6>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* card */} \r\n      </div>\r\n      {/* container */}\r\n    </div>\r\n  );\r\n}\r\n","import './App.css';\nimport Card from './component/Card';\nimport React from 'react'\n\n\nfunction App() {\n  return (\n      <Card/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}